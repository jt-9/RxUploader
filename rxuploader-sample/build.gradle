apply plugin: 'com.android.application'

dependencies {
    implementation project(':rxuploader')

    implementation rootProject.deps.androidDesign
    implementation rootProject.deps.androidAppCompat
    implementation rootProject.deps.androidAnnotations

    implementation rootProject.deps.okHttp
    implementation rootProject.deps.okHttpLogging

    implementation rootProject.deps.retrofit
    implementation rootProject.deps.retrofitGsonConverter
    implementation rootProject.deps.retrofitRxJavaAdapter

    implementation rootProject.deps.rxJava
    implementation rootProject.deps.rxAndroid

    implementation rootProject.deps.glide

    implementation rootProject.deps.gson

    annotationProcessor rootProject.deps.autovalue
    annotationProcessor rootProject.deps.autovalueGsonExt
    annotationProcessor rootProject.deps.autovalueGsonFactory

    implementation rootProject.deps.timber

    // oauth1
    implementation 'se.akerfeldt:okhttp-signpost:1.1.0'
    implementation 'oauth.signpost:signpost-core:2.1.1'
}

android {
    compileSdkVersion rootProject.COMPILE_SDK_VERSION
    buildToolsVersion rootProject.ANDROID_BUILD_TOOLS_VERSION

    defaultConfig {
        minSdkVersion rootProject.MIN_SDK_VERSION
        targetSdkVersion rootProject.TARGET_SDK_VERSION
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
    }

    compileOptions {
        sourceCompatibility rootProject.JAVA_SOURCE_VERSION
        targetCompatibility rootProject.JAVA_TARGET_VERSION
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            outputs.upToDateWhen { false }
            showStandardStreams = true
        }
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
}

def Properties props = new Properties()
def propFile = new File('signing.properties')
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null &&
            props.containsKey('STORE_FILE') &&
            props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') &&
            props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}
